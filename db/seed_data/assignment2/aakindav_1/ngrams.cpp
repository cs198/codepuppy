/* Charles Akin-David
* CS106B
* SL: Jimmy Lee
* Sources used: Lecture Slides, LaIR
* This program runs NGrams, which allows you to generate
* a random selection of words from a text file then produces
* a paragraph of requested length that is similar to the text.
*/

#include <cctype>
#include <cmath>
#include <fstream>
#include <iostream>
#include <string>
#include "console.h"
#include "random.h"
#include "strlib.h"
#include "simpio.h"
#include "filelib.h"
#include "tokenscanner.h"
#include "hashmap.h"

using namespace std;

void welcomeMessage();
int getN (ifstream& input);
int getRandomNum (int nSize);
void getWords (Vector<string>& words, string& line);
HashMap <Vector<string>, Vector<string> > createMap(int nSize, Vector<string>& words);
void createNGrams (HashMap <Vector<string>, Vector<string> >& nWords, int nSize);
Vector<string> findKey (HashMap <Vector<string>, Vector<string> >& nWords);
string findValue(HashMap <Vector<string>, Vector<string> > nWords, Vector<string>& ranKey);

int main() {
    setConsoleSize(750, 450);
    setConsoleFont("Monospaced-Bold-16");
    setConsoleEcho(true);
    setConsolePrintExceptions(true);

    welcomeMessage();
    ifstream input;
    int nSize = getN(input);
    string line;
    Vector<string> words;
    while (getline(input, line)) {
        getWords (words,line);
    }
    HashMap <Vector<string>, Vector<string> > nWords = createMap(nSize, words);
    createNGrams(nWords,nSize);
    cout << "Exiting." << endl;
    return 0;
}

/* Displays the beginning message which explains
 * how the program works.
 */
void welcomeMessage() {
    cout << "Welcome to CS 106B Random Writer ('N-Grams')." << endl;
    cout << "This program makes random text based on a document." << endl;
    cout << "Give me an input file and an 'N' value for groups" << endl;
    cout << "of words, and I'll create random text for you." << endl;
    cout << endl;
}

/* Reads the file inputted by the user and also
 * checks to make sure such file exists, then asks the
 * user for a value for N and makes sure that that value
 * is an integer greater than 1.
 * Takes in an ifstream as a parameter.
 */
int getN (ifstream& input) {
    promptUserForFile(input, "Input file name? ");
    int nSize = getInteger("Value of N? ");
    while (nSize<1) {
        cout << "Value of N must be at least 1" << endl;
        nSize = getInteger("Value of N? ");
    }
    cout << endl;
    return nSize;
}

/* Asks the user for the number of words they wish to
 * generate and makes sure that the number is greater than
 * the N value they inputted and not 0.
 * Takes in the N value as a paramter.
 */
int getRandomNum (int nSize) {
    int ranNum = getInteger("# of random words to generate (0 to quit)? ");
    while (ranNum < nSize && ranNum != 0 ) {
        cout << "Number must be at least the value of N" << endl;
        ranNum = getInteger("# of random words to generate (0 to quit)? ");
    }
    return ranNum;
}

/* Puts each line in the text file in a token scanner which
 * takes out each word in every line one by one then the
 * function trims off the whitespace before storing the word.
 * Finally checks to make sure the word isn't an empty value before
 * storing it into the Vector that contains all the words.
 * Takes in the parameters Vector<string> to store the words
 * into and string line which is the line in the text.
 * Assumes Vector is empty in the beginning.
 */
void getWords (Vector<string>& words, string& line) {
    TokenScanner scanner(line);
    while (scanner.hasMoreTokens()) {
        string token = trim(scanner.nextToken());
        if (token.length() != 0) words.add(token);
    }
}

/* Creates and returns a HashMap containing all the key value
 * pairs that is generated by the chosen N value and the text
 * file. Makes the keys and values Vectors as well so that they
 * store multiple words easily. Contains the mod math function
 * to provide the wrap around.
 * Parameters are the N value, and the Vector containing all the
 * words in the file.
 */
HashMap <Vector<string>, Vector<string> > createMap(int nSize, Vector<string>& words) {
    HashMap <Vector<string>, Vector<string> > nWords;
    for (int i=0; i<words.size(); i++) {
        Vector<string> key;
        Vector<string> value;
        for (int j=i; j<=i+nSize-1; j++) {
            int keyIndex = j%words.size();
            key.add(words[keyIndex]);
        }
        int valIndex = (i+nSize)%words.size();
        value.add(words[valIndex]);
        if (nWords.containsKey(key)) {
            nWords[key].add(words[valIndex]);
        } else {
            nWords[key] = value;
        }
    }
    return nWords;
}

/* Takes the number of words given by the user and checks if it
 * 0 if not the function finds a random key usng the findKey()
 * function and prints out the wprds in this key then proceeds
 * to looping through values generated by the find value function
 * until the number of words requested by the user is generated.
 * Passed in the HashMap containing all key value pairs and the
 * N value created by the user.
 */
void createNGrams (HashMap <Vector<string>, Vector<string> >& nWords, int nSize) {
    while (true) {
        int ranNum = getRandomNum(nSize);
        if (ranNum == 0) break;
        cout << endl;
        Vector<string> ranKey = findKey(nWords);
        cout << "... ";
        for (int i=0; i<nSize; i++) {
            cout << ranKey[i] << " ";
        }
        for (int i=0; i<ranNum-nSize; i++) {
            string actualVal = findValue(nWords,ranKey);
            cout << actualVal << " " ;
        }
        cout << "..."<< endl;
        cout << endl;
    }
}

/* Makes a Vector contain the keys in the map then picks
 * a random number to choose a random key and returns that
 * key.
 * Passed in hashmap containing all the generated key value
 * pairs.
 */
Vector<string> findKey (HashMap <Vector<string>, Vector<string> >& nWords) {
    Vector <Vector<string> > keySet = nWords.keys();
    int	ranPreffixNum = randomInteger(0,keySet.size()-1);
    Vector<string> ranKey = keySet[ranPreffixNum];
    return ranKey;
}

/* Takes the value associated with the random key choosen and
 * chooses a random word in that vector then removes the first
 * word from the random key vector and adds this newly found value
 * into the random key vector.
 * Passed in the HashMap containg all the key value pairs and the
 * vector of the random key.
 */
string findValue(HashMap <Vector<string>, Vector<string> > nWords, Vector<string>& ranKey) {
    Vector <string> ranVal = nWords[ranKey];
    int ranSuffixNum = randomInteger(0, ranVal.size()-1);
    string actualVal = ranVal[ranSuffixNum];
    ranKey.remove(0);
    ranKey.add(actualVal);
    return actualVal;
}
