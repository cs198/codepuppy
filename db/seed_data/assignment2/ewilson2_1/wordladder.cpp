 // This program will take two English words of the same length, generated by the user, and find the shortest word ladder between the two of them

#include <cctype>
#include <cmath>
#include <fstream>
#include <iostream>
#include <sstream>
#include <string>
#include "console.h"
#include "filelib.h"
#include "simpio.h"
#include "set.h"
#include "queue.h"
#include "stack.h"

using namespace std;

void setup();
void makeDictionary(Set<string>& dictionary);
void getInput(Set<string>& dictionary);
void makeDictionary(Set<string>& dictionary);
int wordLadder(string word1, string word2, Set<string>& dictionary);
void printFinalLadder(Stack<string> stack, string word1, string word2);

int main() {
    setup();
    Set<string> dictionary;
    makeDictionary(dictionary);
    getInput(dictionary);
    cout << "Have a nice day." << endl;
    return 0;
}

//This method sets up the console and prints out the text explaining the word ladder program
void setup() {
    setConsoleSize(750, 450);
    setConsoleFont("Monospaced-Bold-16");
    setConsoleEcho(true);
    setConsolePrintExceptions(true);
    cout << "Welcome to CS 106B Word Ladder." << endl;
    cout << "Please give me two English words, and I will change the" << endl;
    cout << "first into the second by changing one letter at a time." << endl;
}

//This method creates the dictionary of English words that the program will rely on
void makeDictionary(Set<string>& dictionary) {
    ifstream infile;
    string word;
    infile.open("dictionary.txt");
    while(getline(infile, word)) {
        dictionary.add(word);
    }
    infile.close();
}

//This method gets & checks the user input of words to create the ladder, and then prints out the following ladder.
//This method will be called as long as the user is using the application.
void getInput(Set<string>& dictionary) {
    string word1;
    string word2;
    while(true) {
        cout << "" << endl;
        word1=getLine("Word #1 (or Enter to quit): ");
        if (word1.empty()) {
            break;
        }
        for(int i=0; i<word1.length(); i++) {
            word1[i]=tolower(word1[i]);
        }
        word2=getLine("Word #2 (or Enter to quit): ");
        if(word2.empty()) {
            break;
        }
        for(int i=0; i<word2.length(); i++) {
            word2[i]=tolower(word2[i]);
        }
        int length1=word1.length();
        int length2=word2.length();
        if(length1!=length2) {
            cout << "The two words must be the same length." << endl;
        } else if(word1==word2) {
            cout << "The two words must be different." << endl;
        } else if(dictionary.contains(word1)==false || dictionary.contains(word2)==false) {
            cout << "The two words must be found in the dictionary." << endl;
        }
        else {
            wordLadder(word1, word2, dictionary);
        }
    }


}

//This method takes two words in as parameters, and an English dictionary, and creates a word ladder
int wordLadder(string word1, string word2, Set<string>& dictionary) {
    Queue< Stack<string> > queue;
    Stack<string> stack;
    stack.push(word1);
    queue.enqueue(stack);
    Set<string> usedWords;
    while(queue.isEmpty()==false) {
        Stack<string> stack=queue.dequeue();
        string checkWord=stack.peek();
        string check1=checkWord;
        for(int i=0; i<checkWord.length(); i++) {
            for(int j='a'; j<'z'; j++) {
                char ch=j;
                checkWord[i]=ch;
                if(checkWord==word2) {
                    stack.push(checkWord);
                    printFinalLadder(stack, word1, word2);
                    return 0;
                }
                 else if(dictionary.contains(checkWord)) {
                    if(usedWords.contains(checkWord)==false) {
                        usedWords.add(checkWord);
                        Stack<string> stack1=stack;
                        stack1.push(checkWord);
                        queue.enqueue(stack1);
                    }

                }
                checkWord=check1;
            }
        }

    }
    if(queue.isEmpty()) {
        cout << "No word ladder found from " << word2 << " back to " << word1 << "." << endl;
    }
}

//This method prints out the final ladder for the user to view
void printFinalLadder(Stack<string> stack, string word1, string word2) {
    cout << "A ladder from "+word2+" back to "+word1+":" << endl;
    while(stack.isEmpty()==false) {
        cout << stack.pop();
        cout << " ";
    }
    cout << endl;
}
